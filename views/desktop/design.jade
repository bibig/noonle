extends ./layout/full

block design
	style(type="text/css")
		#{node.safeCss}

block asserts
	link(rel='stylesheet', href='http://code.jquery.com/ui/1.9.2/themes/base/jquery-ui.css')
	link(rel='stylesheet', href='/asserts/stylesheets/jquery.miniColors.css')
	script(src='http://code.jquery.com/ui/1.9.2/jquery-ui.js')
	script(src='/asserts/javascripts/theme.color.js')
	script(src='/asserts/javascripts/jquery.miniColors.js')
	

block main
	mixin ulThemes(themes)
		ul.themes
			each theme in themes
				mixin liTheme(theme)
				
	mixin liTheme(theme)
		li.theme
			.mini-paper(style="background-color: #{theme.backgroundColor}", onclick="preview(this, #{theme.id})")
				.mini-paper-title(style="background-color: #{theme.bgOfTitle};color: #{theme.fgOfTitle};")
					| ##{theme.id}
				.mini-paper-content.mini-paper-catalog(style="background-color: #{theme.bgOfContent}; color: #{theme.fgOfContent};")
					| #{theme.name}
				.mini-paper-foot(style="background-color: #{theme.bgOfFoot}; color: #{theme.fgOfFoot};")
	
	mixin ulpatterns(names)
		ul.patterns
			each name in names
				mixin liPattern(name)
				
	mixin liPattern(name)
		li.pattern(title="#{name}", style="background: url(/asserts/images/patterns/#{name}) repeat", onclick="previewPattern(this, '#{name}')")
	
	#design-sidebar.ui-widget-content
		#accordion
			h3
				= __i('template')
			div
				mixin ulThemes(themes)
			h3
				= __i('background')
			div
				mixin ulpatterns(patterns)
			h3 
				= __i('palette')
			div
				form#designPanel(onsubmit="return false;")
					h5
						= __i('web')
					input.color(type="minicolors",  data-swatch-position="left",  name="backgroundColor")
					span.label
						= __i('bg')
					br
					h5
						= __i('title')
					input.color(type="minicolors",  data-swatch-position="left",  name="bgOfTitle")
					span.label
						= __i('bg')
					input.color(type="minicolors",  data-swatch-position="left",  name="fgOfTitle")
					span.label
						= __i('fg')
					h5
						= __('content')
					input.color(type="minicolors",  data-swatch-position="left",  name="bgOfContent")
					span.label
						= __i('bg')
					br
					input.color(type="minicolors",  data-swatch-position="left",  name="fgOfContent")
					span.label
						= __i('fg')
					br
					input.color(type="minicolors",  data-swatch-position="left",  name="anchorInContent")
					span.label
						= __i('link')
					
					h5
						= __i('catalog')
					input.color(type="minicolors",  data-swatch-position="left",  name="bgOfCatalog")
					span.label
						= __i('bg')
					br
					input.color(type="minicolors",  data-swatch-position="left",  name="anchorInCatalog")
					span.label
						= __i('link')
						
					h5
						= __i('foot')
					input.color(type="minicolors",  data-swatch-position="left",  name="bgOfFoot")
					span.label
						= __i('bg')
					br
					input.color(type="minicolors",  data-swatch-position="left",  name="fgOfFoot")
					span.label
						= __i('fg')
					br
					input.color(type="minicolors",  data-swatch-position="left",  name="anchorInFoot")
					span.label
						= __i('link')
					
			
		.saveDesign
			form.customize(id="designForm", action="/design/#{node.id}", method="post")
				input(type="hidden", name="_csrf", value="#{token}")
				input(type="hidden", name="css")
				button.btn.btn-block.btn-success.btn-large.disabled(onclick="return submitCss()", disabled="disabled")
					= __i('save')
		
	- var _nodeBox = {node: node, isAdmin: isAdmin}
	include _nodeBox
			
	
	script
		
		var inputSelectorMaps = {
			'backgroundColor': ['body', 'background-color'],
			'backgroundImage': ['body', 'background-image'],
			'backgroundPosition': ['body', 'background-position'],
			'backgroundAttachment': ['body', 'background-attachement'],
			'backgroundRepeat': ['body', 'background-repeat'],
			'bgOfTitle': ['.paper .paper-title', 'background-color'],
			'bgOfContent': ['.paper .paper-content', 'background-color'],
			'bgOfCatalog': ['.paper .paper-catalog', 'background-color'],
			'bgOfFoot': ['.paper .paper-foot', 'background-color'],
			'fgOfTitle': ['.paper .paper-title', 'color'],
			'fgOfContent': ['.paper .paper-content', 'color'],
			'fgOfFoot': ['.paper .paper-foot', 'color'],
			'anchorInContent': ['.paper .paper-content a', 'color'],
			'anchorInCatalog': ['.paper .paper-catalog a', 'color'],
			'anchorInFoot': ['.paper .paper-foot a', 'color']
		};
		
		$(document).ready( function () {
			var bodyheight = $(document).height();
			$("design-sidebar").height(bodyheight);
			
			$( "#accordion" ).accordion({
				heightStyle: "fill"
			});
			
			// for the window resize
			$(window).resize(function() {
				var bodyheight = $(document).height();
				$("design-sidebar").height(bodyheight);
				$( "#accordion" ).accordion( "refresh" );
			});
			
			// darkCatalog();
			// darkAnchor();
			extractCss();
			inputsOnChange();
			$.minicolors.init();
			
		});
		
		function enableSave () {
			$('button', ".saveDesign").removeProp('disabled').removeClass('disabled');
		}
		
		function preview (me, id) {
			$("body").css('background-color', $(me).css('background-color'));
			copyColor(me, ['paper-title', 'paper-content', 'paper-catalog', 'paper-foot'], 'background-color');
			copyColor(me, ['paper-title', 'paper-content', 'paper-catalog', 'paper-foot'], 'color');
			copyColor(me, ['paper-content a', 'paper-catalog a', 'paper-foot a'], 'color');
			setValueOfTheme(me);
			darkAnchor();
			enableSave();
		}
		
		function previewPattern (me, name) {
			$("body").css('background-image', $(me).css('background-image'));
			$("body").css('background-repeat', $(me).css('background-repeat'));
			$("body").css('background-attachment', $(me).css('background-attachment'));
			// $('input[name="backgroundImage"]', "#designPanel").val(extractImageUrl($(me).css('background-image')));
			// $('input[name="backgroundRepeat"]', "#designPanel").val($(me).css('background-repeat'));
			enableSave();
		}
		
		function copyColor (me, items, property) {
			var v;
			for (var i = 0; i< items.length; i++) {
				if (v = $('.mini-' + items[i], me).css(property)) {
					// console.log(property + '=' + v);
					$('.' + items[i], ".paper").css(property, v);
				} 
			}
		}
		
		function setValueOfTheme (me) {
			var anchorColor = getDynamicAnchorColor();
			
			$('input[name="backgroundColor"]', "#designPanel").val(rgb2hex($(me).css('background-color')));
			$('input[name="bgOfTitle"]', "#designPanel").val(rgb2hex($('.mini-paper-title', me).css('background-color')));
			$('input[name="bgOfContent"], input[name="bgOfCatalog"]', "#designPanel").val(rgb2hex($('.mini-paper-content', me).css('background-color')));
			$('input[name="bgOfFoot"]', "#designPanel").val(rgb2hex($('.mini-paper-foot', me).css('background-color')));
			
			$('input[name="fgOfTitle"]', "#designPanel").val(rgb2hex($('.mini-paper-title', me).css('color')));
			$('input[name="fgOfContent"]', "#designPanel").val(rgb2hex($('.mini-paper-content', me).css('color')));
			$('input[name="fgOfFoot"]', "#designPanel").val(rgb2hex($('.mini-paper-foot', me).css('color')));
			
			$('input[name="anchorInContent"]', "#designPanel").val(anchorColor);
			$('input[name="anchorInCatalog"]', "#designPanel").val(anchorColor);
			$('input[name="anchorInFoot"]', "#designPanel").val(anchorColor);
			
			$.minicolors.refresh();
		}
		
		function inputsOnChange () {
			$('input, select', "#designPanel").change(function () {
				enableSave();
				var target = inputSelectorMaps[$(this).attr('name')];
				$(target[0]).css(target[1], $(this).val());
			});
		}
		
		function getDynamicAnchorColor () {
			return shadeColor(rgb2hex($(".paper-title", ".paper").css('background-color')), -50);
		}
		
		function darkAnchor () {
			$("a", ".paper").css('color', getDynamicAnchorColor());
		}
		
		function submitCss () {
			exportCss();
			$('#designForm').submit();
		}
		
		function exportCss () {
			var selectors = {
				'body': ['background-color', 'background-image', 'background-repeat', 'background-position', 'background-attachment'], 
				'.paper .paper-title': ['background-color', 'color'], 
				'.paper .paper-content': ['background-color', 'color'], 
				'.paper .paper-catalog': ['background-color', 'color'], 
				'.paper .paper-foot': ['background-color', 'color'], 
				'.paper .paper-title a': ['color'], 
				'.paper .paper-content a': ['color'], 
				'.paper .paper-catalog a': ['color'], 
				'.paper .paper-foot a': ['color']
			};
			var cssStr = '';
			
			for (var name in selectors) {
				var properties = selectors[name];
				var str = '';
				var value;
				for (var i = 0; i < properties.length; i++) {
					if (value = $(name).css(properties[i])) {
						str += properties[i] + ':' + value + ';';
					}
				}
				cssStr += name+ '{' + str + '}';
			}
			
			$('input[name="css"]', '#designForm').val(cssStr);
			
		}
		
		function extractCss () {
			// console.log('ready to extract css');
			for (var input in inputSelectorMaps) {
				var selector = inputSelectorMaps[input][0];
				var property = inputSelectorMaps[input][1];
				var value = $(selector).css(property);
				// console.log(selector + ':' + property + '=' + value);
				if (!value) continue;
				
				switch (property) {
					case 'color':
						value = rgb2hex(value);
						break;
					case 'background-color':
						if (value === 'rgba(0, 0, 0, 0)' || value === 'transparent') {
							value = getBackground($(selector).parent());
						}
						value = rgb2hex(value);
						break;
				}
				
				// console.log('ready to set ' + input + '=' + value);
				$('input[name="' + input + '"]', '#designPanel').val(value);
			}
		}